// Generated by CoffeeScript 1.8.0
var Attack, Environment, GameLoop, Loop, MainMenuLoop, Piece, Player, Sprite, Stage, attacks, constants, loadImage, loadPlayer, loadStage, pieces, players, stages,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

constants = {
  "MENU_BUTTONS_POS": {
    "x": 100,
    "y": 100
  },
  "MENU_BUTTONS_WIDTH": 100,
  "MENU_BUTTONS_HEIGHT": 200,
  "MENU_BUTTON_HEIGHT": 50,
  "MENU_NUM_ELEM": 4,
  "KEY_ENTER": 13,
  "KEY_ESC": 27,
  "KEY_LEFT": 37,
  "KEY_UP": 38,
  "KEY_RIGHT": 39,
  "KEY_DOWN": 40,
  "P1_INIT_POS": {
    "x": 100,
    "y": 0
  },
  "P2_INIT_POS": {
    "x": 700,
    "y": 0
  },
  "GRAVITY": 0.1,
  "LIMIT_LEFT": 50,
  "LIMIT_RIGHT": 50
};

stages = [
  {
    "background_img": "src/images/stages/0_b.png",
    "foreground_img": "src/images/stages/0_f.png",
    "foreground_loc": 325,
    "base_line": 405,
    "width": 800
  }
];

players = [
  {
    "name": "Ducky",
    "legs": 0,
    "body": 1,
    "head": 2,
    "arms": 3,
    "attacks": []
  }
];

pieces = [
  {
    "class": "piece",
    "attributes": {
      "type": "leg",
      "name": "Basic Legs",
      "movement": 5.0,
      "jump": 30.0,
      "weight": 5.0,
      "max_weight": 30.0,
      "power": 1.0,
      "base_points": [
        {
          "x": 40,
          "y": 10
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ]
    },
    "image": "src/images/pieces/0.png",
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }, {
    "class": "piece",
    "attributes": {
      "type": "body",
      "name": "Basic Body",
      "weight": 5.0,
      "defense": 1.0,
      "special_defense": 1.0,
      "hit_points": 100.0,
      "legs_points": [
        {
          "x": 30,
          "y": 60
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ],
      "head_points": [
        {
          "x": 40,
          "y": 20
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ],
      "arms_points": [
        {
          "x": 50,
          "y": 30
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ]
    },
    "image": "src/images/pieces/1.png",
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }, {
    "class": "piece",
    "attributes": {
      "type": "head",
      "name": "Basic Head",
      "weight": 3.0,
      "special_power": 1.0,
      "base_points": [
        {
          "x": 30,
          "y": 80
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ]
    },
    "image": "src/images/pieces/2.png",
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }, {
    "class": "piece",
    "attributes": {
      "type": "arm",
      "name": "Basic Arm",
      "weight": 5.0,
      "power": 1.0,
      "defense": 1.0,
      "base_points": [
        {
          "x": 0,
          "y": 40
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 0
        }
      ]
    },
    "image": "src/images/pieces/3.png",
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }
];

attacks = [
  {
    "class": "attack",
    "image": "src/attacks/0.png",
    "behaviour": "static",
    "type": "normal",
    "multiplier": 1.0,
    "base_points": [
      {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }
    ],
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }, {
    "class": "attack",
    "image": "src/attacks/0.png",
    "behaviour": "forward",
    "type": "special",
    "multiplier": 1.0,
    "base_points": [
      {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }
    ],
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }, {
    "class": "attack",
    "image": "src/attacks/0.png",
    "behaviour": "up",
    "type": "mixed",
    "multiplier": 1.0,
    "base_points": [
      {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }, {
        "x": 0,
        "y": 0
      }
    ],
    "dimensions": [
      {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }, {
        "w": 80,
        "h": 80
      }
    ]
  }
];

Environment = (function() {
  function Environment() {
    this.layers = [];
    this.layers[0] = $("#backLayer")[0].getContext("2d");
    this.layers[1] = $("#middleLayer")[0].getContext("2d");
    this.layers[2] = $("#frontLayer")[0].getContext("2d");
    this.width = this.layers[0].canvas.width;
    this.height = this.layers[0].canvas.height;
    this.loop = new MainMenuLoop(this);
    this.loading = true;
    this.constants = constants;
    this.keys = {};
    this.data = {
      pieces: pieces,
      attacks: attacks,
      players: players,
      stages: stages
    };
    document.onkeydown = (function(_this) {
      return function(event) {
        return _this.onKeyDown(event);
      };
    })(this);
    document.onkeyup = (function(_this) {
      return function(event) {
        return _this.onKeyUp(event);
      };
    })(this);
    document.onmousedown = (function(_this) {
      return function(event) {
        return _this.onMouseDown(event);
      };
    })(this);
    document.onmouseup = (function(_this) {
      return function(event) {
        return _this.onMouseUp(event);
      };
    })(this);
    document.onmousemove = (function(_this) {
      return function(event) {
        return _this.onMouseMove(event);
      };
    })(this);
    setTimeout(((function(_this) {
      return function() {
        return _this.tick();
      };
    })(this)), this.loop.frame_time);
  }

  Environment.prototype.drawSprite = function(img, rect, pos) {
    return this.layers[1].drawImage(img, rect.x, rect.y, rect.w, rect.h, pos.x, pos.y, rect.w, rect.h);
  };

  Environment.prototype.drawBackground = function(img, rect, pos) {
    return this.layers[0].drawImage(img, rect.x, rect.y, rect.w, rect.h, pos.x, pos.y, rect.w, rect.h);
  };

  Environment.prototype.drawForeground = function(img, rect, pos) {
    return this.layers[2].drawImage(img, rect.x, rect.y, rect.w, rect.h, pos.x, pos.y, rect.w, rect.h);
  };

  Environment.prototype.clean = function() {
    this.layers[0].clearRect(0, 0, this.width, this.height);
    this.layers[1].clearRect(0, 0, this.width, this.height);
    return this.layers[2].clearRect(0, 0, this.width, this.height);
  };

  Environment.prototype.clear = function(_arg) {
    var h, w, x, y;
    x = _arg.x, y = _arg.y, w = _arg.w, h = _arg.h;
    return this.layers[1].clearRect(x, y, w, h);
  };

  Environment.prototype.tick = function() {
    if (this.loading) {
      this.loading = !this.loop.isReady();
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time);
    } else {
      this.loop.clear(this);
      this.loop.animate(this);
      this.loop.draw(this);
      return setTimeout(((function(_this) {
        return function() {
          return _this.tick();
        };
      })(this)), this.loop.frame_time);
    }
  };

  Environment.prototype.onKeyDown = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = true;
      return this.loop.onKeyDown(event, this);
    }
  };

  Environment.prototype.onKeyUp = function(event) {
    if (!this.loading) {
      this.keys[event.keyCode] = false;
      return this.loop.onKeyUp(event, this);
    }
  };

  Environment.prototype.onMouseDown = function(event) {
    if (!this.loading) {
      return this.loop.onMouseDown(event, this);
    }
  };

  Environment.prototype.onMouseUp = function(event) {
    if (!this.loading) {
      return this.loop.onMouseUp(event, this);
    }
  };

  Environment.prototype.onMouseMove = function(event) {
    if (!this.loading) {
      return this.loop.onMouseMove(event, this);
    }
  };

  return Environment;

})();

Loop = (function() {
  var frame_time;

  function Loop(environment) {
    this.state = {};
  }

  Loop.prototype.isReady = function() {
    return true;
  };

  frame_time = 1000 / 32;

  Loop.prototype.clear = function(environment) {};

  Loop.prototype.animate = function(environment) {};

  Loop.prototype.draw = function(environment) {};

  Loop.prototype.onKeyDown = function(event, environment) {};

  Loop.prototype.onKeyUp = function(event, environment) {};

  Loop.prototype.onMouseDown = function(event, environment) {};

  Loop.prototype.onMouseUp = function(event, environment) {};

  Loop.prototype.onMouseMove = function(event, environment) {};

  return Loop;

})();

GameLoop = (function(_super) {
  __extends(GameLoop, _super);

  function GameLoop(environment, p1_def, p2_def, stage) {
    var _ref, _ref1, _ref2;
    GameLoop.__super__.constructor.call(this, environment);
    environment.clean();
    this.state.dirty = true;
    this.state.scroll = 0;
    this.frame_time = 1000 / 32;
    _ref = loadPlayer(environment, p1_def, environment.constants.P1_INIT_POS), this.l_p1 = _ref["loaded"], this.state.p1 = _ref["content"];
    _ref1 = loadPlayer(environment, p2_def, environment.constants.P2_INIT_POS), this.l_p2 = _ref1["loaded"], this.state.p2 = _ref1["content"];
    _ref2 = loadStage(stage), this.l_stage = _ref2["loaded"], this.state.stage = _ref2["content"];
  }

  GameLoop.prototype.isReady = function() {
    return this.l_p1._ & this.l_p2._ & this.l_stage._;
  };

  GameLoop.prototype.animate = function(environment) {
    this.state.p1.animate(environment);
    this.state.p2.animate(environment);
    return this.state.stage.animate(environment);
  };

  GameLoop.prototype.draw = function(environment) {
    this.state.p1.draw(environment);
    this.state.p2.draw(environment);
    return this.state.stage.draw(environment);
  };

  GameLoop.prototype.clear = function(environment) {
    this.state.p1.clear(environment);
    return this.state.p2.clear(environment);
  };

  return GameLoop;

})(Loop);

MainMenuLoop = (function(_super) {
  __extends(MainMenuLoop, _super);

  function MainMenuLoop(environment) {
    var _ref, _ref1, _ref2;
    MainMenuLoop.__super__.constructor.call(this, environment);
    environment.clean();
    this.state.selected = 0;
    this.state.previous = 0;
    this.state.dirty = true;
    this.frame_time = 1000 / 16;
    _ref = loadImage("src/images/main_menu_background.png"), this.l_background = _ref["loaded"], this.background = _ref["content"];
    _ref1 = loadImage("src/images/main_menu_buttons.png"), this.l_buttons = _ref1["loaded"], this.buttons = _ref1["content"];
    _ref2 = loadImage("src/images/main_menu_sel_buttons.png"), this.l_sel_buttons = _ref2["loaded"], this.sel_buttons = _ref2["content"];
  }

  MainMenuLoop.prototype.isReady = function() {
    return this.l_background._ & this.l_buttons._ & this.l_sel_buttons._;
  };

  MainMenuLoop.prototype.draw = function(environment) {
    var pos, rect;
    if (this.state.dirty) {
      rect = {
        "x": 0,
        "y": 0,
        "w": environment.width,
        "h": environment.height
      };
      pos = {
        "x": 0,
        "y": 0
      };
      environment.drawBackground(this.background, rect, pos);
      rect = {
        "x": 0,
        "y": 0,
        "w": environment.constants.MENU_BUTTONS_WIDTH,
        "h": environment.constants.MENU_BUTTONS_HEIGHT
      };
      pos = {
        "x": environment.constants.MENU_BUTTONS_POS.x,
        "y": environment.constants.MENU_BUTTONS_POS.y
      };
      environment.drawBackground(this.buttons, rect, pos);
      rect = this.calculateButtonSprite(environment);
      pos = this.calculateButtonPos(environment);
      environment.drawSprite(this.sel_buttons, rect, pos);
      this.state.dirty = false;
    }
    if (this.state.selected !== this.state.previous) {
      rect = this.calculateClearArea(environment);
      environment.clear(rect);
      rect = this.calculateButtonSprite(environment);
      pos = this.calculateButtonPos(environment);
      return environment.drawSprite(this.sel_buttons, rect, pos);
    }
  };

  MainMenuLoop.prototype.calculateButtonSprite = function(environment) {
    var height, width, x, y;
    x = 0;
    y = this.state.selected * environment.constants.MENU_BUTTON_HEIGHT;
    width = environment.constants.MENU_BUTTONS_WIDTH;
    height = environment.constants.MENU_BUTTON_HEIGHT;
    return {
      "x": x,
      "y": y,
      "w": width,
      "h": height
    };
  };

  MainMenuLoop.prototype.calculateButtonPos = function(environment) {
    var x, y;
    x = environment.constants.MENU_BUTTONS_POS.x;
    y = environment.constants.MENU_BUTTONS_POS.y + environment.constants.MENU_BUTTON_HEIGHT * this.state.selected;
    return {
      "x": x,
      "y": y
    };
  };

  MainMenuLoop.prototype.calculateClearArea = function(environment) {
    var height, width, x, y;
    x = environment.constants.MENU_BUTTONS_POS.x;
    y = environment.constants.MENU_BUTTONS_POS.y + environment.constants.MENU_BUTTON_HEIGHT * this.state.previous;
    width = environment.constants.MENU_BUTTONS_WIDTH;
    height = environment.constants.MENU_BUTTON_HEIGHT;
    return {
      "x": x,
      "y": y,
      "w": width,
      "h": height
    };
  };

  MainMenuLoop.prototype.onKeyUp = function(event, environment) {
    switch (event.keyCode) {
      case environment.constants.KEY_UP:
        this.state.previous = this.state.selected;
        return this.state.selected = __modulo(this.state.selected - 1, environment.constants.MENU_NUM_ELEM);
      case environment.constants.KEY_DOWN:
        this.state.previous = this.state.selected;
        return this.state.selected = (this.state.selected + 1) % environment.constants.MENU_NUM_ELEM;
      case environment.constants.KEY_ENTER:
        switch (this.state.selected) {
          case 0:
            environment.loop = new GameLoop(environment, environment.data.players[0], environment.data.players[0], environment.data.stages[0]);
            return environment.loading = true;
        }
    }
  };

  return MainMenuLoop;

})(Loop);

Player = (function() {
  function Player(environment, def, pos) {
    var movement_multiplier;
    this.pos = pos;
    this.legs = new Piece(pos, environment.data.pieces[def.legs]);
    this.body = new Piece(pos, environment.data.pieces[def.body]);
    this.head = new Piece(pos, environment.data.pieces[def.head]);
    this.arms = new Piece(pos, environment.data.pieces[def.arms]);
    this.max_weight = this.legs.attributes.max_weight;
    this.weight = this.legs.attributes.weight + this.body.attributes.weight + this.head.attributes.weight + this.arms.attributes.weight;
    this.state = "idle";
    this.s_power = this.head.attributes.special_power;
    this.a_power = this.arms.attributes.power;
    this.l_power = this.legs.attributes.power;
    this.defense = this.body.attributes.defense;
    this.s_defense = this.body.attributes.special_defense;
    this.a_defense = this.arms.attributes.defense;
    this.hit_points = this.body.attributes.hit_points;
    movement_multiplier = this.calculateMovementMultiplier();
    this.movement = Math.round(this.legs.attributes.movement * movement_multiplier);
    this.jump = this.legs.attributes.jump * movement_multiplier;
    this.y_speed = 0;
    this.bounding_rect = this.getBoundingRect();
  }

  Player.prototype.isReady = function() {
    return this.legs.isReady() & this.body.isReady() & this.head.isReady() & this.arms.isReady();
  };

  Player.prototype.getBoundingRect = function() {
    var x, x2, x_max, x_min, y, y2, y_max, y_min;
    x = this.legs.pos.x;
    x2 = this.legs.pos.x + this.legs.dimensions[this.legs.current_sprite].w;
    y = this.legs.pos.y;
    y2 = this.legs.pos.y + this.legs.dimensions[this.legs.current_sprite].h;
    x_min = x;
    x_max = x2;
    y_min = y;
    y_max = y2;
    x = this.body.pos.x;
    x2 = this.body.pos.x + this.body.dimensions[this.body.current_sprite].w;
    y = this.body.pos.y;
    y2 = this.body.pos.y + this.body.dimensions[this.body.current_sprite].h;
    x_min = Math.min(x_min, x);
    x_max = Math.max(x_max, x2);
    y_min = Math.min(y_min, y);
    y_max = Math.max(y_max, y2);
    x = this.head.pos.x;
    x2 = this.head.pos.x + this.head.dimensions[this.head.current_sprite].w;
    y = this.head.pos.y;
    y2 = this.head.pos.y + this.head.dimensions[this.head.current_sprite].h;
    x_min = Math.min(x_min, x);
    x_max = Math.max(x_max, x2);
    y_min = Math.min(y_min, y);
    y_max = Math.max(y_max, y2);
    x = this.arms.pos.x;
    x2 = this.arms.pos.x + this.arms.dimensions[this.arms.current_sprite].w;
    y = this.arms.pos.y;
    y2 = this.arms.pos.y + this.arms.dimensions[this.arms.current_sprite].h;
    x_min = Math.min(x_min, x);
    x_max = Math.max(x_max, x2);
    y_min = Math.min(y_min, y);
    y_max = Math.max(y_max, y2);
    return {
      "x": x_min,
      "y": y_min,
      "w": x_max - x_min,
      "h": y_max - y_min
    };
  };

  Player.prototype.clear = function(environment) {
    return environment.clear(this.bounding_rect);
  };

  Player.prototype.draw = function(environment) {
    var arms_point, base, body_point, head_point, legs_point, scroll;
    scroll = environment.loop.state.scroll;
    base = environment.loop.state.stage.base_line;
    legs_point = {};
    legs_point.x = this.pos.x - scroll - this.legs.image.width / 2;
    legs_point.y = base - this.pos.y - this.legs.image.height;
    this.legs.pos = legs_point;
    body_point = {};
    body_point.x = legs_point.x + this.legs.attributes.base_points[this.legs.current_sprite].x - this.body.attributes.legs_points[this.body.current_sprite].x;
    body_point.y = legs_point.y + this.legs.attributes.base_points[this.legs.current_sprite].y - this.body.attributes.legs_points[this.body.current_sprite].y;
    this.body.pos = body_point;
    head_point = {};
    head_point.x = body_point.x + this.body.attributes.head_points[this.body.current_sprite].x - this.head.attributes.base_points[this.head.current_sprite].x;
    head_point.y = body_point.y + this.body.attributes.head_points[this.body.current_sprite].y - this.head.attributes.base_points[this.head.current_sprite].y;
    this.head.pos = head_point;
    arms_point = {};
    arms_point.x = body_point.x + this.body.attributes.arms_points[this.body.current_sprite].x - this.arms.attributes.base_points[this.arms.current_sprite].x;
    arms_point.y = body_point.y + this.body.attributes.arms_points[this.body.current_sprite].y - this.arms.attributes.base_points[this.arms.current_sprite].y;
    this.arms.pos = arms_point;
    this.head.draw(environment);
    this.body.draw(environment);
    this.arms.draw(environment);
    this.legs.draw(environment);
    return this.bounding_rect = this.getBoundingRect();
  };

  Player.prototype.animate = function(environment) {
    if (environment.keys[environment.constants.KEY_LEFT]) {
      this.pos.x -= this.movement;
      this.pos.x = Math.max(environment.constants.LIMIT_LEFT, this.pos.x);
    }
    if (environment.keys[environment.constants.KEY_RIGHT]) {
      this.pos.x += this.movement;
      this.pos.x = Math.min(environment.loop.state.stage.width - environment.constants.LIMIT_RIGHT, this.pos.x);
    }
    if (environment.keys[environment.constants.KEY_UP] && this.state === "idle") {
      this.y_speed = this.jump;
      this.state = "jump";
    }
    this.pos.y += Math.floor(this.y_speed);
    this.y_speed -= Math.max(this.weight, 0) * environment.constants.GRAVITY;
    if (this.pos.y < 0) {
      this.pos.y = 0;
      this.state = "idle";
      return this.y_speed = 0;
    }
  };

  Player.prototype.calculateMovementMultiplier = function() {
    var rate;
    rate = this.weight / this.max_weight;
    if (rate < 0) {
      return 1.5;
    } else if (rate < 0.5) {
      return 1;
    } else if (rate < 0.75) {
      return 0.75;
    } else if (rate < 0.90) {
      return 0.50;
    } else if (rate < 1) {
      return 0.25;
    } else {
      return 0;
    }
  };

  return Player;

})();

loadPlayer = function(environment, def, pos) {
  var check, result;
  result = {
    "loaded": {
      "_": false
    },
    "content": new Player(environment, def, pos)
  };
  check = function(result) {
    if (result.content.isReady()) {
      return result.loaded._ = true;
    } else {
      return setTimeout((function() {
        return check(result);
      }), 100);
    }
  };
  check(result);
  return result;
};

Stage = (function() {
  function Stage(def) {
    var _ref, _ref1;
    _ref = loadImage(def.background_img), this.l_background = _ref["loaded"], this.background = _ref["content"];
    _ref1 = loadImage(def.foreground_img), this.l_foreground = _ref1["loaded"], this.foreground = _ref1["content"];
    this.foreground_loc = def.foreground_loc, this.base_line = def.base_line, this.width = def.width;
    this.dirty = true;
  }

  Stage.prototype.isReady = function() {
    return this.l_background._ & this.l_foreground._;
  };

  Stage.prototype.animate = function(environment) {};

  Stage.prototype.draw = function(environment) {
    var pos, rect;
    if (this.dirty) {
      rect = {
        "x": environment.loop.state.scroll,
        "y": 0,
        "w": environment.width,
        "h": this.background.height
      };
      pos = {
        "x": 0,
        "y": 0
      };
      environment.drawBackground(this.background, rect, pos);
      rect = {
        "x": environment.loop.state.scroll,
        "y": 0,
        "w": environment.width,
        "h": this.foreground.height
      };
      pos = {
        "x": 0,
        "y": this.foreground_loc
      };
      environment.drawForeground(this.foreground, rect, pos);
      return this.dirty = false;
    }
  };

  return Stage;

})();

loadStage = function(def) {
  var check, result;
  result = {
    "loaded": {
      "_": false
    },
    "content": new Stage(def)
  };
  check = function(result) {
    if (result.content.isReady()) {
      return result.loaded._ = true;
    } else {
      return setTimeout((function() {
        return check(result);
      }), 100);
    }
  };
  check(result);
  return result;
};

Sprite = (function() {
  function Sprite(pos, definition) {
    var acum, aux, dimension, _ref;
    this.pos = pos;
    _ref = loadImage(definition.image), this.l_image = _ref["loaded"], this.image = _ref["content"];
    this.dimensions = definition.dimensions;
    acum = 0;
    this.sprite_start = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.dimensions;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        dimension = _ref1[_i];
        aux = acum;
        acum += dimension.h;
        _results.push(aux);
      }
      return _results;
    }).call(this);
    this.frame = 0;
    this.current_sprite = 0;
    this.current_state = 0;
  }

  Sprite.prototype.isReady = function() {
    return this.l_image._;
  };

  Sprite.prototype.getShowingRect = function() {
    var dim, x, y;
    dim = this.dimensions[this.current_sprite];
    x = dim.w * this.current_state;
    y = this.sprite_start[this.current_sprite];
    return {
      "x": x,
      "y": y,
      "w": dim.w,
      "h": dim.h
    };
  };

  Sprite.prototype.animate = function(environment) {
    return this.frame += 1;
  };

  Sprite.prototype.draw = function(environment) {
    var rect;
    rect = this.getShowingRect();
    return environment.drawSprite(this.image, rect, this.pos);
  };

  return Sprite;

})();

Piece = (function(_super) {
  __extends(Piece, _super);

  function Piece(pos, definition) {
    Piece.__super__.constructor.call(this, pos, definition);
    this.attributes = definition.attributes;
  }

  return Piece;

})(Sprite);

Attack = (function(_super) {
  __extends(Attack, _super);

  function Attack(pos, definition, power, s_power, owner) {
    this.owner = owner;
    Attack.__super__.constructor.call(this, pos, definition);
    this.base_points = definition.base_points;
    this.type = definition.type;
    this.power = (function() {
      switch (false) {
        case this.type !== "normal":
          return power;
        case this.type !== "special":
          return s_power;
        case this.type !== "mixed":
          return (power + s_power) / 2;
        default:
          throw "Unrecognized attack type.";
      }
    }).call(this);
    this.power = this.power * definition.multiplier;
  }

  return Attack;

})(Sprite);

loadImage = function(src) {
  var result;
  result = {
    "loaded": {
      "_": false
    },
    "content": new Image
  };
  result.content.onload = function() {
    return result.loaded._ = true;
  };
  result.content.src = src;
  return result;
};
